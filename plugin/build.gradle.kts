/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Gradle plugin project to get you started.
 * For more details take a look at the Writing Custom Plugins chapter in the Gradle
 * User Manual available at https://docs.gradle.org/8.1/userguide/custom_plugins.html
 */

plugins {
    // Apply the Java Gradle plugin development plugin to add support for developing Gradle plugins
    `java-gradle-plugin`

    // Apply the Kotlin JVM plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.8.10"

    id("com.gradle.plugin-publish") version "1.2.0"
}

repositories {
    mavenCentral()
}

dependencies {
    // Use the Kotlin JUnit 5 integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit5")

    implementation("commons-io:commons-io:2.11.0")
    implementation("de.undercouch:gradle-download-task:5.4.0")
}

gradlePlugin {
    website.set("https://github.com/dwatling/gradle-launch4j-plugin")
    vcsUrl.set("https://github.com/dwatling/gradle-launch4j-plugin.git")

    plugins {
        create("launch4j") {
            id = "io.watling.gradle.launch4j"
            version = "1.0.0"
            displayName = "Gradle Launch4j Plugin"
            description = "Launch4j Gradle Plugin. Wraps launch4j and uses existing launch4j.xml configuration."
            tags.set(listOf("launch4j"))
            implementationClass = "io.watling.gradle.GradleLaunch4jPlugin"
        }
    }
}

// Add a source set for the functional test suite
val functionalTestSourceSet = sourceSets.create("functionalTest") {
}

configurations["functionalTestImplementation"].extendsFrom(configurations["testImplementation"])

// Add a task to run the functional tests
val functionalTest by tasks.registering(Test::class) {
    testClassesDirs = functionalTestSourceSet.output.classesDirs
    classpath = functionalTestSourceSet.runtimeClasspath
    useJUnitPlatform()
}

gradlePlugin.testSourceSets.add(functionalTestSourceSet)

tasks.named<Task>("check") {
    // Run the functional tests as part of `check`
    dependsOn(functionalTest)
}

tasks.named<Test>("test") {
    // Use JUnit Jupiter for unit tests.
    useJUnitPlatform()
}
